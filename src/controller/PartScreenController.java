/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;

/**
 *
 * @author portl
 */
public class PartScreenController implements Initializable {
    
    //Private Fields
    
    private Part partToModify = null;
    private int indexToUpdate = -1;
    private boolean addingNewPart = true;
    private boolean isInHousePart;
    
    //FXID's
    @FXML
    private Label PartTitleLabel;
        
    @FXML
    private RadioButton inHouseRadioButton;
    
    @FXML
    private RadioButton outsourcedRadioButton;

    @FXML
    private TextField idTextField;

    @FXML
    private TextField partNameTextField;

    @FXML
    private TextField inventoryTextField;

    @FXML
    private TextField costTextField;

    @FXML
    private TextField maxTextField;

    @FXML
    private TextField minTextField;
    
    @FXML
    private Label companyName_MachineIdLabel;

    @FXML
    private TextField companyName_MachineIdTextField;


    /*********ACTION EVENT METHODS***********/
    @FXML
    void onActionSavePart(ActionEvent event) throws IOException {
        Alert inventoryAlert = new Alert(Alert.AlertType.ERROR, "The inventory minimum, maximum, and quantities do not compute. Please re-check the figures "
                + "and try again.\n"
                + "Minimum: " + minTextField.getText() + "\n"
                + "Maximum: " + maxTextField.getText() + "\n"
                + "Inventory: " + inventoryTextField.getText());
        if (!isInventoryValid(Integer.parseInt(minTextField.getText()), Integer.parseInt(maxTextField.getText()), Integer.parseInt(inventoryTextField.getText()))){
            inventoryAlert.showAndWait();
            return;
        }
        try{
            savePart();
        } catch(NumberFormatException ex){
            Alert numberAlert = new Alert(Alert.AlertType.ERROR, "Please verify data entered is in the correct format and try again."
                    + " Please note that all fields are required, and all fields require numeric input except for the name fields.");
            numberAlert.showAndWait();
            return;
        }

            //Sorts the list for easier navigation
            Inventory.getAllParts().sort((a, b) -> Integer.compare(a.getId(), b.getId()));
            displayMenu("/view/MainScreen.fxml", event);
    }

    @FXML
    void onActionDisplayMainScreen(ActionEvent event) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Canceling will cause any changes to be discarded."
                + " Are you sure you wish to proceed?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.isPresent() && result.get() == ButtonType.OK) {
            displayMenu("/view/MainScreen.fxml", event);
        }
    }

    @FXML
    void onActionSetInHouse(ActionEvent event) {
        companyName_MachineIdLabel.setText("Machine ID");
        companyName_MachineIdTextField.setPromptText("Enter Machine ID");
        companyName_MachineIdTextField.setText("");
    }

    @FXML
    void onActionSetOutsourced(ActionEvent event) {
        companyName_MachineIdLabel.setText("Company Name");
        companyName_MachineIdTextField.setPromptText("Enter Company Name");
        companyName_MachineIdTextField.setText("");
    }
    
    
    /**** CUSTOM METHODS ******/
    
    //Finds the max Id value in the parts table and returns the next id number to use.
    private String getAutoGeneratedId(){
        int id = 1;
        
        if (Inventory.getAllParts().isEmpty())
            return String.valueOf(id);
        else
            id = Inventory.getAllParts().get(0).getId();
                for(Part part : Inventory.getAllParts()){
                    if (part.getId() > id)
                        id = part.getId();
            }
            id += 1;
            return String.valueOf(id);
    }
      
    
    public void sendPartToModifyPartWindow(Part part, int indexToUpdate) {
        
        partToModify = part;
        PartTitleLabel.setText("Modify Part");
        idTextField.setText(String.valueOf(part.getId()));
        partNameTextField.setText(part.getName());
        inventoryTextField.setText(String.valueOf(part.getStock()));
        costTextField.setText(String.valueOf(part.getPrice()));
        maxTextField.setText(String.valueOf(part.getMax()));
        minTextField.setText(String.valueOf(part.getMin()));
        addingNewPart = false;
        this.indexToUpdate = indexToUpdate;

        if (part instanceof InHouse) {
            inHouseRadioButton.setSelected(true);
            isInHousePart = true;
            companyName_MachineIdLabel.setText("Machine ID");
            companyName_MachineIdTextField.setText(String.valueOf(((InHouse) part).getMachineId()));

        } else if (part instanceof Outsourced) {
            outsourcedRadioButton.setSelected(true);
            isInHousePart = false;
            companyName_MachineIdLabel.setText("Company Name");
            companyName_MachineIdTextField.setText(((Outsourced) part).getCompanyName());
        }
    }
    
    //Determines if the minimum inventory level is less than or equal to the max inventory level, and if the inventory is within those limits
    private boolean isInventoryValid(int min, int max, int inventory){
        if (min > max)
            return false;
        else 
            return inventory <= max && inventory >= min;
    }
    
    //Logic for saving the part, once all validation is checked/approved in the Action event.
    private void savePart(){

        int id = Integer.parseInt(idTextField.getText());
        String partName = partNameTextField.getText();
        int inventory = Integer.parseInt(inventoryTextField.getText());
        double cost = Double.parseDouble(costTextField.getText());
        int max = Integer.parseInt(maxTextField.getText());
        int min = Integer.parseInt(minTextField.getText());

        isInHousePart = (inHouseRadioButton.isSelected()) ? true : false;

        if (isInHousePart) {
            int machineId = Integer.parseInt(companyName_MachineIdTextField.getText());
            if(addingNewPart){
                Inventory.addPart(new InHouse(id, partName, cost, inventory, min, max, machineId));
            }
            //Updating an InHouse part (not adding)
            else{
                Inventory.updatePart(this.indexToUpdate, new InHouse(id, partName, cost, inventory, min, max, machineId));
            }
        
        //Determined to be Outsourced Part
        } else {
            String companyName = companyName_MachineIdTextField.getText();
            if(addingNewPart){
                Inventory.addPart(new Outsourced(id, partName, cost, inventory, min, max, companyName));
            }
            //Updating Outsourced Part
            else{
                Inventory.updatePart(this.indexToUpdate, new Outsourced(id, partName, cost, inventory, min, max, companyName));
            }
        }

    }
        
    //Used to display a screen, passing in the path as a parameter
    private void displayMenu(String path, ActionEvent event) throws IOException {

        Stage stage;
        Parent scene;

        stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(getClass().getResource(path));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
        if (addingNewPart)
            idTextField.setText(getAutoGeneratedId());
    } 
}
